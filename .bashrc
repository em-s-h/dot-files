# |------------------------------------------|
# | This file is autogenerated. Do not edit! |
# |------------------------------------------|
# ~/.bashrc

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Make less more friendly for non-text input files
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# Enable color support
[[ -x /usr/bin/dircolors ]] && eval "$(dircolors -b)"

# Clear history after exiting {{{
clr_hist() {
    clear
    reset
    history -c
    history -w
}

trap clr_hist EXIT
# }}}

# Sourcing {{{
# Functions
[[ -f ~/.config/bash/functions ]] && . ~/.config/bash/functions

# Aliases
[[ -f ~/.config/bash/aliases ]] && . ~/.config/bash/aliases

# Completions
if [[ -d ~/.config/bash/completions ]]; then
    for f in ~/.config/bash/completions/*; do
        . "$f"
    done
fi

# Command not found
. /usr/share/doc/pkgfile/command-not-found.bash
# }}}

# Variables {{{
# Don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# Set history length.
HISTFILESIZE=2000
HISTSIZE=1000

# Colored GCC warnings and errors.
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Disable .NET telemetry
export DOTNET_CLI_TELEMETRY_OPTOUT=1

export EDITOR="nvim -u ~/.config/nvim/vi_init.lua --noplugins"
export VISUAL="nvim -u ~/.config/nvim/vim_init.lua"
export SUDO_EDITOR="$EDITOR"
export GIT_EDITOR="$EDITOR"
# }}}

# Prompt {{{
# man terminfo - For more info on tput args
RED=$(tput setaf 1) # Red
GRN=$(tput setaf 2) # Green
YEL=$(tput setaf 3) # Yellow
BLU=$(tput setaf 4) # Blue
MAG=$(tput setaf 5) # Magenta
CYA=$(tput setaf 6) # Cyan
WHT=$(tput setaf 7) # White
BLK=$(tput setaf 8) # Black

BLD=$(tput bold)    # Bold
ITL=$(tput sitm)    # Italic
UL=$(tput smul)     # Underline
NC=$(tput sgr0)     # No color & format

myjobs() {
    local jbs=$(jobs | wc -l)
    if [[ $jbs > 0 ]]; then
        printf " ${jbs}j "
    else
        printf "-"
    fi
}

PS1='\[$MAG\]┌< \[$BLK$ITL$BLD\]$(spwd)\[$NC$MAG\] >-<\[$YEL\]$(myjobs)\[$MAG\]>-< \[$RED\]\!! \[$MAG\]> \[$RED\]\u\[$WHT\]@\[$RED\]\l \n \[$NC$MAG\]> \[$YEL\]\$ \[$NC\]'

# Old prompts
#                 r   g   b
# PS1=' \[\e[38;2;148;0;211m\]\[\e[97;48;2;148;0;211m\] $(spwd) \[\e[0;38;2;148;0;211m\] \[\e[38;2;131;111;255m\]\u\[\e[38;2;224;102;255m\]\$ \[\e[0m\]'
# PS1='\[\e[30;48;5;81;1m\] $(spwd) \[\e[0;38;5;81;48;5;86m\]\[\e[30;1m\] \u \[\e[0;38;5;86;48;5;140m\]\[\e[30;1m\] \$ \[\e[0;38;5;140m\] \[\e[0m\]'
# PS1='\[\e[30;48;5;81;1m\] $(spwd) \[\e[0;38;5;81;48;5;86m\]\[\e[30;1m\] \u \[\e[0;38;5;86;48;5;140m\]\[\e[30;1m\] \$ \[\e[0;38;5;140m\] \[\e[0m\]'
# }}}

# Config {{{
shopt -s checkwinsize
shopt -s histappend
shopt -s globstar
shopt -s cdspell
shopt -s autocd

set -o noclobber
set -o vi
# }}}

if [[ $(tty) = *tty* ]]; then
    echo "tty detected, no annoying messages"
    return
fi

# To-do {{{
important_count=$(grep -icE 'study|homework|important' ~/.local/share/tsk/tasks)
done_count=$(grep -c '\[X\]' ~/.local/share/tsk/tasks)
term_count=$(ls /dev/pts/ | grep -vcE '[[:alpha:]]')

## Read the to-do list warning {{{
if (( $important_count >= 1 )); then
    if (( $important_count > 3)); then
        echo -e "${RED}" \
        '
 _  ______ _____  ___ ______   _____ _   _  _____   _____ _____       ______ _____   _     _____ _____ _____   _ 
| | | ___ \  ___|/ _ \|  _  \ |_   _| | | ||  ___| |_   _|  _  |      |  _  \  _  | | |   |_   _/  ___|_   _| | |
| | | |_/ / |__ / /_\ \ | | |   | | | |_| || |__     | | | | | |______| | | | | | | | |     | | \ `--.  | |   | |
| | |    /|  __||  _  | | | |   | | |  _  ||  __|    | | | | | |______| | | | | | | | |     | |  `--. \ | |   | |
|_| | |\ \| |___| | | | |/ /    | | | | | || |___    | | \ \_/ /      | |/ /\ \_/ / | |_____| |_/\__/ / | |   |_|
(_) \_| \_\____/\_| |_/___/     \_/ \_| |_/\____/    \_/  \___/       |___/  \___/  \_____/\___/\____/  \_/   (_)
        ' \
        "${NC}"
    else
        echo -e "${RED} ! READ THE TO-DO LIST ! ${NC}"
    fi
fi
## }}}

if (( $done_count >= 2 )) ; then
    tsk clear
else
    tsk
fi
# }}}

# ssh agent. {{{
env=~/.ssh/agent.env

agent_load_env () {
    test -f "$env" && . "$env" >| /dev/null ;
}

agent_start () {
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ;
}
agent_load_env

# agent_run_state: 0 agent running w/ key; 1 agent w/o key; 2 agent not running.
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add

elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add
fi
# }}}

sleep 2
# Emilly S.H. :D
